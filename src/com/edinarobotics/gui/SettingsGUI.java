/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsGUI.java
 *
 * Created on Nov 3, 2011, 9:13:40 PM
 */

package com.edinarobotics.gui;

import com.edinarobotics.data.ConfigFile;
import com.edinarobotics.logger.Logger;
import com.edinarobotics.scout.Global;
import java.io.File;

/*
 * @author aoneill
 * @note Made by the Netbeans built-in GUI creator
 */


public class SettingsGUI extends javax.swing.JFrame
{
    ConfigFile config = new ConfigFile();
    
    private static String selectedWorkspaceDir = Global.workspaceDir;
    private static boolean logActivate = Global.logActivate;
    private static final String currentDir = Global.currentDir;
    private static final Logger log = Global.log;
    private static final String LOG_TAG = "SettingsGUI";
    
    private static boolean scoutBool = false;

    /** Creates new form SettingsGUI */
    public SettingsGUI()
    {
        initComponents();
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logCheckBox = new javax.swing.JCheckBox();
        scoutButton = new javax.swing.JButton();
        wDirPanel = new javax.swing.JPanel();
        workspaceLocationBox = new javax.swing.JTextField();
        chooseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        logCheckBox.setText("Log Session");
        logCheckBox.setFocusable(false);

        scoutButton.setText("Crunch!");
        scoutButton.setFocusable(false);
        scoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoutButtonActionPerformed(evt);
            }
        });

        wDirPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Working Directory"));

        workspaceLocationBox.setColumns(50);
        workspaceLocationBox.setEditable(false);
        workspaceLocationBox.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        workspaceLocationBox.setFocusable(false);

        chooseButton.setText("Choose ...");
        chooseButton.setFocusable(false);
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout wDirPanelLayout = new org.jdesktop.layout.GroupLayout(wDirPanel);
        wDirPanel.setLayout(wDirPanelLayout);
        wDirPanelLayout.setHorizontalGroup(
            wDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(wDirPanelLayout.createSequentialGroup()
                .add(wDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(workspaceLocationBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, wDirPanelLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(chooseButton)))
                .addContainerGap())
        );
        wDirPanelLayout.setVerticalGroup(
            wDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(wDirPanelLayout.createSequentialGroup()
                .add(workspaceLocationBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chooseButton))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(logCheckBox)
                        .add(138, 138, 138)
                        .add(scoutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(wDirPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(wDirPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 82, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(scoutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(logCheckBox))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init()
    {
        String[] configData = config.configRead();
        selectedWorkspaceDir = configData[0];
        logActivate = Boolean.parseBoolean(configData[1]);
        
        setTeamDirField(selectedWorkspaceDir);
        setLogBox(logActivate);

        fileExplorer = new javax.swing.JFileChooser();
        fileExplorer.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        setVisible(true);
    }
    
    private void scoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoutButtonActionPerformed
        // TODO add your handling code here:
        scoutBool = true;
        
        Global.workspaceDir = workspaceLocationBox.getText();
        Global.commentDir = selectedWorkspaceDir + "/" + Global.commentFolderName;
        
        Global.logActivate = logCheckBox.isSelected();
        log.setEnabled(logActivate);
        
        String[] configUpdate = 
            {Global.workspaceDir, String.valueOf(Global.logActivate)};
        
        config.configWrite(configUpdate);
    }//GEN-LAST:event_scoutButtonActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        // TODO add your handling code here:
        fileExplorer.setCurrentDirectory(new File(currentDir));
        
        int returnVal = fileExplorer.showOpenDialog(this);
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            try
            {
                selectedWorkspaceDir = fileExplorer.getSelectedFile().getPath();
                workspaceLocationBox.setText(selectedWorkspaceDir);
            }
            catch(Exception e)
            {
                log.log(LOG_TAG, "Could not set Workspace field!");
            }
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    private void setTeamDirField(String dirPath)
    {
        selectedWorkspaceDir = dirPath;
        workspaceLocationBox.setText(selectedWorkspaceDir);
    }

    private void setLogBox(boolean state)
    {
        logCheckBox.setSelected(state);
    }

    public boolean getLogBox()
    {
        return logCheckBox.isSelected();
    }

    public String getTeamDirPath()
    {
        return selectedWorkspaceDir;
    }

    public boolean getScoutStatus() throws InterruptedException
    {
        Thread.sleep(10);
        return scoutBool;
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseButton;
    private javax.swing.JCheckBox logCheckBox;
    private javax.swing.JButton scoutButton;
    private javax.swing.JPanel wDirPanel;
    private javax.swing.JTextField workspaceLocationBox;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JFileChooser fileExplorer;
}
