/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PenaltiesGUI.java
 *
 * Created on Dec 17, 2011, 10:52:13 PM
 */

package org.scouting.gui;

import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/*
 * @author aoneill
 * @note Made by the Netbeans built-in GUI creator
 */
public class PenaltiesGUI extends javax.swing.JFrame
{
    private String teamNameString = "Team Number";
    private String headerDataSeparator = "-----------";
    public String[][] allData;
    public String[] tableHeader = {"Team Number"};
    private int teamCount;
    private String penaltiesBoxHeader = "- Penalties -";

    /** Creates new form PenaltiesGUI */
    public PenaltiesGUI()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        comboBox = new javax.swing.JComboBox();
        textScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        tableLabel = new javax.swing.JLabel();
        comboLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        teamTable = new javax.swing.JTable();

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        setResizable(false);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        textScrollPane.setViewportView(textArea);

        tableLabel.setText("Teams With Penalties");

        comboLabel.setText("Penalties For");

        teamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Teams"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane.setViewportView(teamTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(tableScrollPane, 0, 0, Short.MAX_VALUE)
                    .add(tableLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 99, Short.MAX_VALUE)
                        .add(comboLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(textScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tableLabel)
                    .add(comboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(comboLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(textScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .add(tableScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxActionPerformed
        // TODO add your handling code here:
        String[][] penaltiesTeams = sortBest(allData, 5);
        setExpandedPenalties(penaltiesTeams, comboBox.getSelectedItem().toString(), teamCount);
    }//GEN-LAST:event_comboBoxActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PenaltiesGUI().setVisible(true);
            }
        });
    }
    
    public void setTeamList(String[] data)
    {
        String[][] list = new String[data.length][1];
        for(int i = 0; i < data.length; i++)
        {
            list[i][0] = data[i];
        }

        teamTable.setModel(new DefaultTableModel(list, tableHeader));
    }

    public void setPenalties(String[][] data)
    {
        allData = data;
        String[][] penaltiesTeams = sortBest(data, 5);
        String[] list = extractTeamSequence(penaltiesTeams, teamCount);
        list = removeNull(list);
        setTeamList(list);
        setComboBox(list);
        setExpandedPenalties(penaltiesTeams, comboBox.getSelectedItem().toString(), teamCount);
    }

    public void setExpandedPenalties(String data[][], String currentTeam, int teamCount)
    {
        String extractedPenalties = "";

        for(int i = 0; i < teamCount; i++)
        {
            if(data[i][0].equals(currentTeam))
            {
                extractedPenalties = data[i][6];
            }
        }

        textArea.setText(penaltiesBoxHeader + "\n");

        extractedPenalties = extractedPenalties.replaceAll(":", "\n");

        textArea.append(extractedPenalties);

    }

    public void setComboBox(String[] data)
    {
        comboBox.setModel(new DefaultComboBoxModel(data));
    }

    public void setTeamCount(int num)
    {
        teamCount = num;
    }

    public String[] extractTeamSequence(String data[][], int length)
    {
        String[] result = new String[length];
        for(int i = 0; i < length; i++)
        {
            result[i] = data[i][0];
        }

        return result;
    }

    public String[][] sortBest(String array[][], int member)
    {
        String result[][] = new String[teamCount][7];

        double topMember = 0;
        double topAuto = 0;
        double topMain = 0;
        double topEnd = 0;
        double topOverall = 0;
        double topPenalties = 0;
        String penalties = "";
        int teamNumber = 0;
        for(int i = 0; i < teamCount; i++)
        {
            double firstNumber = Double.parseDouble(array[i][member]);
            if(firstNumber > topMember)
            {
                teamNumber = Integer.parseInt(array[i][0]);
                topAuto = Double.parseDouble(array[i][1]);
                topMain = Double.parseDouble(array[i][2]);
                topEnd = Double.parseDouble(array[i][3]);
                topOverall = Double.parseDouble(array[i][4]);
                topPenalties = Double.parseDouble(array[i][5]);
                penalties = array[i][6];
                topMember = Double.parseDouble(array[i][member]);
            }
        }

        result[0][0] = Integer.toString(teamNumber);
        result[0][1] = Double.toString(topAuto);
        result[0][2] = Double.toString(topMain);
        result[0][3] = Double.toString(topEnd);
        result[0][4] = Double.toString(topOverall);
        result[0][5] = Double.toString(topPenalties);
        result[0][6] = penalties;
        result[0][member] = Double.toString(topMember);

        for(int i = 0; i < teamCount - 1; i++)
        {
            topMember = 0;
            topAuto = 0;
            topMain = 0;
            topEnd = 0;
            topOverall = 0;
            topPenalties = 0;
            penalties = "";
            teamNumber = 0;
            for(int j = 0; j < teamCount; j++)
            {
                double currentNumber = Double.parseDouble(array[j][member]);
                double lastNumber = Double.parseDouble(result[i][member]);

                if(currentNumber > topMember && currentNumber < lastNumber)
                {
                    teamNumber = Integer.parseInt(array[j][0]);
                    topAuto = Double.parseDouble(array[j][1]);
                    topMain = Double.parseDouble(array[j][2]);
                    topEnd = Double.parseDouble(array[j][3]);
                    topOverall = Double.parseDouble(array[j][4]);
                    topPenalties = Double.parseDouble(array[j][5]);
                    penalties = array[j][6];
                    topMember = Double.parseDouble(array[j][member]);
                }
            }

            //TODO: Impliment Stuff here!

            result[i + 1][0] = Integer.toString(teamNumber);
            result[i + 1][1] = Double.toString(topAuto);
            result[i + 1][2] = Double.toString(topMain);
            result[i + 1][3] = Double.toString(topEnd);
            result[i + 1][4] = Double.toString(topOverall);
            result[i + 1][5] = Double.toString(topPenalties);
            result[i + 1][6] = penalties;
            result[i + 1][member] = Double.toString(topMember);
        }

        return result;
    }

    public String[] removeNull(String[] data)
    {
        String[] result;

        int count = 0;
        for(int i = 0; i < data.length; i++)
        {
            if(Integer.parseInt(data[i]) != 0)
            {
                count++;
            }
        }

        System.out.println("Found " + count + " valid Penalty holder(s) of " + teamCount + " valid teams");

        result = new String[count];

        count = 0;
        for(int i = 0; i < data.length; i++)
        {
            if(Integer.parseInt(data[i]) != 0)
            {
                result[count] = data[i];
                count++;
            }
        }

        return result;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboBox;
    private javax.swing.JLabel comboLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable teamTable;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textScrollPane;
    // End of variables declaration//GEN-END:variables

}
