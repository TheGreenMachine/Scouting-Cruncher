/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PenaltiesGUI.java
 *
 * Created on Dec 17, 2011, 10:52:13 PM
 */

package org.scouting.gui;

import java.util.ArrayList;
import org.scouting.filer.FileScanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/*
 * @author aoneill
 * @note Made by the Netbeans built-in GUI creator
 */
public class CommentsGUI extends javax.swing.JFrame
{
    private String[] tableHeader = {"Team Number"};
    private String TEAM_LIST_NAME = "TeamList";
    private String DEFAULT_COMMENT_FILE_HEADER = "# Comments #\n";

    private int teamCount;
    private String commentDir;
    private String allData[][];


    public CommentsGUI() {}

    /** Creates new form PenaltiesGUI */
    public CommentsGUI(int teamCount, String commentDir, String allData[][])
    {
        initComponents();

        this.allData = allData;
        this.commentDir = commentDir;
        this.teamCount = teamCount;

        init();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        textScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        tableLabel = new javax.swing.JLabel();
        tableScrollPane = new javax.swing.JScrollPane();
        teamTable = new javax.swing.JTable();

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        setResizable(false);

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setRows(5);
        textScrollPane.setViewportView(textArea);

        tableLabel.setText("Teams With Comments");

        teamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Teams"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane.setViewportView(teamTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tableLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, tableScrollPane, 0, 0, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(textScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 364, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, textScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(tableLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CommentsGUI().setVisible(true);
            }
        });
    }

    private void init()
    {
        String[] teamList = extractTeamSequence(allData, teamCount);
        String[] commentHolders = getTeamWithComments(commentDir, teamList);
        setTeamList(commentHolders);

        try
        {
            setCommentsBox(Integer.parseInt(commentHolders[0]), commentDir);
            setVisible(true);
        }
        catch(Exception e)
        {
            ErrorGUI eGUI = new ErrorGUI("No Teams have Comments!", ErrorGUI.ERROR_LOW);
            setVisible(false);
        }

    }
    
    private void setTeamList(String[] data)
    {
        String[][] list = new String[data.length][1];
        for(int i = 0; i < data.length; i++)
        {
            list[i][0] = data[i];
        }

        teamTable.setModel(new DefaultTableModel(list, tableHeader));
    }

    private void setCommentsBox(int teamName, String commentDirPath)
    {
        String teamFileName = teamName + "-Comments.txt";

        FileScanner teamReader = new FileScanner();
        teamReader.openFile(commentDirPath, teamFileName);

        String commentData = "";
        while(teamReader.hasNextEntry())
        {
            commentData = commentData + teamReader.getNextLine() + "\n";
        }

        textArea.setText(commentData);
    }

    public void setTeamCount(int num)
    {
        teamCount = num;
    }

    public void setCommentDir(String path)
    {
        commentDir = path;
    }

    public String[] extractTeamSequence(String data[][], int length)
    {
        String[] result = new String[length];
        for(int i = 0; i < length; i++)
        {
            result[i] = data[i][0];
            System.out.println("Team " + result[i] + " Added");
        }

        return result;
    }

    public String[] getTeamWithComments(String commentDirPath, String[] teamList)
    {
        FileScanner teamFileScanner = new FileScanner();

        ArrayList<String> list = new ArrayList<String>();
        for(int i = 0; i < teamList.length; i++)
        {
            System.out.println("Trying team " + teamList[i]);
            teamFileScanner.openFile(commentDirPath, teamList[i] + "-Comments.txt");

            String totalComments = "";
            while(teamFileScanner.hasNextEntry())
            {
                totalComments = totalComments + teamFileScanner.getNextLine() + "\n";
            }

            if(!totalComments.equals(DEFAULT_COMMENT_FILE_HEADER))
            {
                list.add(teamList[i]);
                System.out.println("Added team " + teamList[i]);
            }
        }

        String result[] = new String[list.size()];
        for(int i = 0; i < list.size(); i++)
        {
            result[i] = list.get(i).toString();
        }

        return result;
    }

    public String getSelectedTeam()
    {
        return teamTable.getValueAt(teamTable.getSelectedRow(), teamTable.getSelectedColumn()).toString();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTable teamTable;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textScrollPane;
    // End of variables declaration//GEN-END:variables

}
